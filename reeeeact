import logo from './logo.svg';
import './App.css';
import Frontline from './component/Frontline';
import Ali from './component/Ali';
import Errorboundry from './component/Errorboundry';
import Jabeen from './component/Jabeen';
import Habeeb from './component/Habeeb';

function App() {
  return (
    <div className="App">

      <Frontline/>
      <Errorboundry>
      <Ali HeroName="Kemi"/>
      <Ali HeroName="Hamhmed"/>
      <Ali HeroName="Hammed"/>
      </Errorboundry>
      <Jabeen/>
    <Habeeb/>


    </div>
  );
}

export default App;


---------------------------------------------------------------------------------



import React from 'react'
import  ReactDOM  from 'react-dom'

const Frontline = () => {
    
  return ReactDOM.createPortal( 

    <h1> Portal Demo </h1>,
    
    document.getElementById("portal-root")
  )
}

export default Frontline

---------------------------------------------------------------------

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);



// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


---------------------------------------------------------------------------

import React from 'react'

const Ali = ({HeroName}) => {

    if(HeroName === 'Hammed'){

        throw new Error("Not a Hero")


    }
  return (
    <div>
        {HeroName}

    </div>
  )
}
    

export default Ali


-------------------------------------------------------------------------

import React, { Component } from 'react'

 class Errorboundry extends Component {
     constructor(props){
         super(props)
         this.state={ 

            hasError:false

         }


     }
     static getDerivedStateFromError(error){

        return{ hasError:true}


     }
     componentDidCatch(error , info ){

        console.log(error)
        console.log(info)
        

     }


  render() {
    if(this.state.hasError){
        return <h1> Something went wrong </h1>

    }

    return this.props.children

  }
}

export default Errorboundry


-----------------------------------------------------------------------------------






import React, { Component } from 'react'

 class Jabeen extends Component {
     constructor(props){
        super(props)
        this.state = {

            count:0
        }



     }
     
     incrementCount = () =>{
         this.setState(prevState => {
            
            return{ count: prevState.count + 1 }
        

         })
     }

  render() {

        const{ count } = this.state

    return (
      <div>
          
          <button onClick={this.incrementCount}> Click {count} </button>


      </div>
    )
  }
}

export default Jabeen


-------------------------------------------------------------------------------------------------

import React, { Component } from 'react'

 class Habeeb extends Component {
    constructor(props){
        super(props)
        this.state = {

            count:0
        }



     }
     
     incrementCount = () =>{
         this.setState(prevState => {
            
            return{ count: prevState.count + 1 }
        

         })
        }


  render() {
      
    const{ count } = this.state
      
    return (


      <div>
        <h2 onMouseOver = {this.incrementCount} > Hover {count} time  </h2>

      </div>
    )
  }
}

export default Habeeb

-----------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>

    <div id="portal-root">  </div>

    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
